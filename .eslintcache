[{"/Users/christiandinata/Documents/Programming/react-todolist/src/index.js":"1","/Users/christiandinata/Documents/Programming/react-todolist/src/App.js":"2","/Users/christiandinata/Documents/Programming/react-todolist/src/components/TodoList.js":"3","/Users/christiandinata/Documents/Programming/react-todolist/src/components/Todo.js":"4","/Users/christiandinata/Documents/Programming/react-todolist/src/components/TodoForm.js":"5"},{"size":199,"mtime":1609756280000,"results":"6","hashOfConfig":"7"},{"size":188,"mtime":1610447866000,"results":"8","hashOfConfig":"7"},{"size":2297,"mtime":1661314215559,"results":"9","hashOfConfig":"7"},{"size":2462,"mtime":1661313298172,"results":"10","hashOfConfig":"7"},{"size":1120,"mtime":1661249261035,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1j9tqe4",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"/Users/christiandinata/Documents/Programming/react-todolist/src/index.js",[],["26","27"],"/Users/christiandinata/Documents/Programming/react-todolist/src/App.js",[],"/Users/christiandinata/Documents/Programming/react-todolist/src/components/TodoList.js",["28"],"import React, { useState, useEffect, useLayoutEffect } from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const todoData = window.localStorage.getItem(\"todo-key\");\r\n    if (todoData) {\r\n      // const parsedTodo = JSON.parse(todoData);\r\n      // for (var i in parsedTodo) todos.push(parsedTodo[i]);\r\n      setTodos(JSON.parse(todoData));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"todo-key\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  const addTodo = (todo) => {\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n      // blank or only space\r\n      return;\r\n    }\r\n    // convert string of object to an array first\r\n    const parsedNewTodos = [];\r\n    const todoData = window.localStorage.getItem(\"todo-key\");\r\n    const parsedOldTodos = JSON.parse(todoData); // string of object\r\n    for (var i in parsedOldTodos) parsedNewTodos.push(parsedOldTodos[i]);\r\n    const newTodos = [todo, ...parsedNewTodos];\r\n    // console.log(newTodos);\r\n\r\n    if (todos.length > 0) {\r\n      // check for identical id\r\n      newTodos.map((checked) => {\r\n        // console.log(checked);\r\n        if (checked.id === todo.id) {\r\n          todo.id = Math.floor(Math.random() * 10000);\r\n        }\r\n        return checked;\r\n      });\r\n    }\r\n    setTodos(newTodos);\r\n    // console.log(todos);\r\n  };\r\n\r\n  const updateTodo = (todoId, newValue) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n      return;\r\n    }\r\n    return setTodos((prevTodos) =>\r\n      prevTodos.map((item) => (item.id === todoId ? newValue : item))\r\n    );\r\n  };\r\n\r\n  const removeTodo = (id) => {\r\n    const removeArr = [...todos].filter((props) => props.id !== id);\r\n    setTodos(removeArr);\r\n  };\r\n\r\n  const completeTodo = (id) => {\r\n    let updatedTodos = todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        todo.isComplete = !todo.isComplete;\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(updatedTodos);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Plans of one fine day</h1>\r\n\r\n      <Todo\r\n        todos={todos}\r\n        completeTodo={completeTodo}\r\n        removeTodo={removeTodo}\r\n        updateTodo={updateTodo}\r\n        addTodo={addTodo}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","/Users/christiandinata/Documents/Programming/react-todolist/src/components/Todo.js",["29"],"import React, { useState, useEffect } from \"react\";\r\nimport { RiCloseCircleLine } from \"react-icons/ri\";\r\nimport { AiOutlineCheckCircle } from \"react-icons/ai\";\r\nimport { TiEdit } from \"react-icons/ti\";\r\nimport Todoform from \"./TodoForm\";\r\nimport { motion } from \"framer-motion\";\r\nimport useScrollPosition from \"@react-hook/window-scroll\";\r\n\r\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo, addTodo }) {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: \"\",\r\n  });\r\n  const scrollY = useScrollPosition(60 /*fps*/);\r\n\r\n  const [isEdit, setIsEdit] = useState(false);\r\n\r\n  const submitUpdate = (value) => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n      id: null,\r\n      value: \"\",\r\n    });\r\n    setIsEdit(!isEdit);\r\n  };\r\n\r\n  if (edit.id) {\r\n    return (\r\n      <Todoform\r\n        editValue={true}\r\n        onSubmit={submitUpdate}\r\n        editMode={true}\r\n        editModeText={edit.value}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!isEdit ? <Todoform onSubmit={addTodo} /> : null}\r\n      <div className=\"todo-wrapper\">\r\n        {todos?.map((todo, index) => {\r\n          return (\r\n            <motion.div\r\n              layout\r\n              className={todo.isComplete ? \"todo-row complete\" : \"todo-row\"}\r\n              key={index}\r\n              initial={{ y: -100 }}\r\n              animate={{ y: 0 }}\r\n              whileHover={{ scale: 1.03 }}\r\n            >\r\n              <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                {todo.text}\r\n              </div>\r\n              <div className=\"icons\">\r\n                <AiOutlineCheckCircle\r\n                  onClick={() => {\r\n                    completeTodo(todo.id);\r\n                  }}\r\n                  className=\"done-icon\"\r\n                />\r\n                <TiEdit\r\n                  onClick={() => {\r\n                    return (\r\n                      setEdit({ id: todo.id, value: todo.text }),\r\n                      setIsEdit(!isEdit)\r\n                    );\r\n                  }}\r\n                  className=\"edit-icon\"\r\n                />\r\n                <RiCloseCircleLine\r\n                  onClick={() => {\r\n                    window.scrollTo(0, scrollY);\r\n                    removeTodo(todo.id);\r\n                  }}\r\n                  className=\"delete-icon\"\r\n                />\r\n              </div>\r\n            </motion.div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","/Users/christiandinata/Documents/Programming/react-todolist/src/components/TodoForm.js",[],["30","31"],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":1,"column":38,"nodeType":"38","messageId":"39","endLine":1,"endColumn":53},{"ruleId":"36","severity":1,"message":"40","line":1,"column":27,"nodeType":"38","messageId":"39","endLine":1,"endColumn":36},{"ruleId":"32","replacedBy":"41"},{"ruleId":"34","replacedBy":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'useLayoutEffect' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.",["43"],["44"],"no-global-assign","no-unsafe-negation"]